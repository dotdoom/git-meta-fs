#!/usr/bin/env bash

# .git directory of the current repository
GIT_DATA_DIR=$(git rev-parse --git-dir)
[ -n "$GIT_DATA_DIR" ] || die "Could not reach .git directory"

# root directory of the current repository
GIT_ROOT=$(git rev-parse --show-toplevel)
[ -n "$GIT_ROOT" ] || die "Could not reach git repository root"

# metafs database file: relative to repository root path
DB_REL_DIR=.gitmetafs

# absolute db path
DB_ABS_DIR="$(readlink -m "$GIT_ROOT/$DB_REL_DIR")"

# script filename
SELF="$( (cd `dirname "$0"`; pwd -P) )/$(basename "$0")"

#
# Logging
#
function info() {
	echo "$0:" "$@"
}

function warn() {
	info "$@" >&1
}

function die() {
	warn "$@"
	exit 1
}

#
# Git file listing
#
function ls_files() {
	git ls-files --full-name -- "$GIT_ROOT" | grep -Fv "$DB_REL_DIR"
}

function ls_all() {
	# First create a directory listing because Git won't list directory names separately
	ls_files | while read filename; do
		dirname $filename
	done | sort -u

	# Now list all the files
	ls_files
}

#
# Database helper functions
#
function _db_real_file() {
	echo "$(echo "$1" | base64 -d)"
}

function _db_data_file() {
	echo "$(echo "$1" | base64)"
}

function db_ls() {
	pushd "$DB_ABS_DIR" &>/dev/null || die "Could not switch to meta-dump directory."
		find . | while read -r filename; do
			# do not forget to remove first 2 chars (./) from $filename (added by find)
			local repo_filename="$(_db_real_file "${filename:2}")"
			[ -n "$repo_filename" ] && echo "$repo_filename"
		done
		popd &>/dev/null
}

function db_delete() {
	local db_filename="$DB_ABS_DIR/$(_db_data_file "$1")"
	git rm -rf "$db_filename"
}

function db_write() {
	local db_filename="$DB_ABS_DIR/$(_db_data_file "$1")"
	echo "$2" >"$db_filename"
}

function db_read() {
	local db_filename="$DB_ABS_DIR/$(_db_data_file "$1")"
	cat "$db_filename" 2>/dev/null
}

# build current permissions database tree in $DB_ABS_DIR
function build_tree() {
	mkdir -m 0700 -p "$DB_ABS_DIR"

	# retrieve current list of files with 'git ls-files'
	local VERSIONED_LIST="$(mktemp)"
	ls_all >"$VERSIONED_LIST"

	# first remove files not listed in current listing
	local removed_files_count=0
	db_ls | grep -Fvxf "$VERSIONED_LIST" | while read -r filename; do
		info "$filename -> /dev/null"
		db_delete "$filename"
		let removed_files_count=$removed_files_count+1
	done
	[ $removed_files_count -gt 0 ] && info "$removed_files_count files were unversioned"

	# now collect status of versioned files
	local added_files_count=0
	while read -r filename; do
		[ -e "$filename" ] || continue # untracked deletion

		local old_filemode="$(db_read "$filename")"
		local filemode="$(/usr/bin/stat --printf '%.4a %U:%G' "$filename")"

		if [ "$old_filemode" != "$filemode" ]; then
			[ -z "$old_filemode" ] && old_filemode='new file'
			info "$filename: $old_filemode -> $filemode"
			db_write "$filename" "$filemode"
		fi
	done <"$VERSIONED_LIST"
	[ $added_files_count -gt 0 ] && info "$added_files_count new files were versioned"

	rm -f "$VERSIONED_LIST"
}

#
# Save current filesystem state to git-meta-fs
#
function meta_commit() {
	build_tree
	git add --all -f "$DB_ABS_DIR"
}

#
# Apply git-meta-fs settings to the filesystem
#
function meta_merge() {
	local filename filemode
	db_ls | while read -r filename; do
		filemode="$(db_read "$filename")"
		if [ -z "$filemode" ]; then
			die "No file mode for $filename"
		else
			filename="$GIT_ROOT/$filename"
			if [ -e "$filename" ]; then
				if [ ! -L "$filename" ]; then
					chmod ${filemode/ */} "$filename"
					chown ${filemode/* /} "$filename"
				fi
			else
				die "No file for $filename ($filemode)"
			fi
		fi
	done
}

#
# Show differencies between commits or a commit and current state
#
function meta_diff() {
	local include_tree_diff
	if [ "$1" = "-a" ]; then
		include_tree_diff=1
		shift
	fi

	[ -z "$GITMETAFS_DEV_MODE" ] && build_tree >/dev/null
	git diff --exit-code "$@" -- "$DB_ABS_DIR" | INCLUDE_TREE_DIFF=$include_tree_diff perl -MMIME::Base64 -e '
		my $filename, $print, $print_override = $ENV{"INCLUDE_TREE_DIFF"},
		   $has_diff = 0;
		while (<>) {
			if ($_ =~ /^(---|\+\+\+) .*\/(.*)/) {
				if ($1 eq "---") {
					if ($2 eq "null") {
						$print = 0;
					} else {
						$filename = $2;
						$print = 1;
					}
				} else {
					if ($2 eq "null") {
						$print = 0;
					} else {
						$filename = $2;
					}

					if ($print || $print_override) {
						print decode_base64($filename);
					}
				}
			} elsif ($_ =~ /^(-|\+)/) {
				if ($print || $print_override) {
					print $_;
					$has_diff = 1;
				}
			}
		}
		exit $has_diff;' | $PAGER

	return ${PIPESTATUS[1]}
}

function write_hook() {
	local hook_path="$GIT_DATA_DIR/hooks/$1"
	shift
	[ -e "$hook_path" ] || echo "#!/bin/sh" >"$hook_path"
	grep -q 'git-meta-fs' "$hook_path" || echo "$SELF $* # launch git-meta-fs" >>"$hook_path"
	chmod u+x "$hook_path"
}

function meta_init() {
	write_hook pre-commit commit && write_hook post-merge merge
}

function usage() {
	cat <<INFO
NAME
	git-meta-fs - add file/directory owner and permission information to the git commit

SYNOPSIS
	$0 init
	$0 diff [-a] [ rev1 [ rev2 ] ]
	$0 status

DESCRIPTION
	git-meta-fs is designed to be used as a Git hook. It stores and restores filesystem objects permission and ownership information.
	The storage is a special directory $DB_REL_DIR which should be added to the source control.

	To install the hooks use 'init'. It will install pre-commit and post-merge hooks which will store and restore all the information.

	Use 'diff' to find the differencies between staged, unstaged and commits (branches, tags). Note: this is not in a unified diff format.
	The '-a' flag shows the file names which are not present in both trees.

	'status' is an alias for 'diff -a HEAD'
INFO

	die 'Command not specified'
}

[ $# -gt 0 ] || usage
case "$1" in
	commit|merge)
		[ $# -eq 1 ] || usage
		[ -z "$GIT_DIR" ] && warn "Looks like $1 command is not called from the git hook!"
		meta_$1
		;;
	init)
		[ $# -eq 1 ] || usage
		meta_$1
		;;
	diff)
		shift
		meta_diff "$@"
		;;
	status)
		[ $# -eq 1 ] || usage
		meta_diff -a HEAD
		;;
	*)
		die "Unknown command: '$1'"
		;;
esac
